//controllers/handlers.go

package controllers

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"
	"sync"
	"text/template"
	"time"

	"learn.zone01kisumu.ke/git/johnodhiambo0/groupie-tracker/api"
)

type TemplateData struct {
	Artists   []api.Artist
	Query     string
	NoResults bool
}

type ArtistDetailData struct {
	Artist   api.Artist
	Location api.Location
	Date     api.Date
	Relation api.Relation
}

var (
	artistCache        []api.Artist
	locationCache      []api.Location
	dateCache          []api.Date
	relationCache      []api.Relation
	cacheTime          time.Time
	cacheMutex         sync.RWMutex
	isCacheInitialized bool
)

const cacheDuration = 10 * time.Minute

func initCache() {
	cacheMutex.Lock()
	defer cacheMutex.Unlock()

	if !isCacheInitialized {
		updateCache()
		isCacheInitialized = true
	}
}

func updateCache() {
	var wg sync.WaitGroup
	wg.Add(4)

	go func() {
		defer wg.Done()
		artists, err := api.GetArtists()
		if err == nil {
			artistCache = artists
		}
	}()

	go func() {
		defer wg.Done()
		locations, err := api.GetLocations()
		if err == nil {
			locationCache = locations
		}
	}()

	go func() {
		defer wg.Done()
		dates, err := api.GetDates()
		if err == nil {
			dateCache = dates
		}
	}()

	go func() {
		defer wg.Done()
		relations, err := api.GetRelations()
		if err == nil {
			relationCache = relations
		}
	}()

	wg.Wait()
	cacheTime = time.Now()
}

func getCachedData() ([]api.Artist, []api.Location, []api.Date, []api.Relation) {
	cacheMutex.RLock()
	defer cacheMutex.RUnlock()

	if time.Since(cacheTime) > cacheDuration {
		go updateCache()
	}

	return artistCache, locationCache, dateCache, relationCache
}

// ErrorHandler handles error responses and templates
func ErrorHandler(w http.ResponseWriter, message string, statusCode int, logError, showStatusCode bool) {
	w.WriteHeader(statusCode)

	data := struct {
		StatusCode int
		ErrMsg     string
	}{
		StatusCode: statusCode,
		ErrMsg:     message,
	}

	// If showStatusCode is false, set StatusCode to 0 to avoid displaying it
	if !showStatusCode {
		data.StatusCode = 0
	}

	tmpl, err := template.ParseFiles("templates/error.html")
	if err != nil {
		if logError {
			log.Println("Error parsing error template:", err)
		}
		http.Error(w, "Oops! Something went wrong on our end. Please try again later.", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "text/html; charset=utf-8")

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, data); err != nil {
		if logError {
			log.Println("Error executing error template:", err)
		}
		return
	}

	_, err = buf.WriteTo(w)
	if err != nil && logError {
		log.Println("Error writing response:", err)
	}
}

// ServeArtists handles the /artists route
func ServeArtists(w http.ResponseWriter, r *http.Request) {
	initCache()
	query := r.URL.Query().Get("query")

	artists, _, _, _ := getCachedData()

	// for i := range artists {
	// 	log.Println(artists[i].Locations)
	// }

	// Fetch locations for all artists and update the Locations field
	for i := range artists {
		location, err := FetchArtistLocations(artists[i].Locations)
		if err == nil {
			// Replace the URL string with the actual location
			artists[i].Locations = location // Single location string
		} else {
			log.Printf("Error fetching location for artist %d: %v", artists[i].ID, err)
		}
	}

	filteredArtists := filterArtists(artists, query)

	// log.Println(filteredArtists)

	// Check if no results were found and query is not empty
	if len(filteredArtists) == 0 && query != "" {
		ErrorHandler(w, "No Result Found for this search.", http.StatusNotFound, false, false)
		return
	}

	data := TemplateData{
		Artists:   filteredArtists,
		Query:     query,
		NoResults: len(filteredArtists) == 0 && query != "",
	}

	tmpl, err := template.ParseFiles("templates/artists.html")
	if err != nil {
		log.Printf("Error parsing template: %v", err)
		ErrorHandler(w, "An unexpected error occurred. Please try again later.", http.StatusInternalServerError, true, true)
		return
	}

	err = tmpl.Execute(w, data)
	if err != nil {
		log.Printf("Error executing template: %v", err)
		ErrorHandler(w, "We encountered an issue while rendering the page. Please try again later.", http.StatusInternalServerError, true, true)
		return
	}
}

// filterArtists filters the list of artists based on the search query
func filterArtists(artists []api.Artist, query string) []api.Artist {
	if query == "" {
		return artists
	}

	query = strings.ToLower(query)
	var result []api.Artist

	for _, a := range artists {
		// Artist/band name matches
		if strings.Contains(strings.ToLower(a.Name), query) {
			result = append(result, a)
			continue
		}

		// Members
		for _, member := range a.Members {
			if strings.Contains(strings.ToLower(member), query) {
				result = append(result, a)
				break
			}
		}

		// First album dates
		if strings.Contains(strings.ToLower(a.FirstAlbum), query) {
			result = append(result, a)
			continue
		}

		// creation dates
		if strings.Contains(strconv.Itoa(a.CreationDate), query) {
			result = append(result, a)
			continue
		}

		location, err := FetchArtistLocations(a.Locations)
		if err == nil {
			if strings.Contains(strings.ToLower(location), query) {
				a.Locations = location // Set the location string
				result = append(result, a)
			}
		}
	}
	return result
}

func GetSearchSuggestionsHandler(w http.ResponseWriter, r *http.Request) {
	initCache()
	query := r.URL.Query().Get("q")
	if query == " " {
		json.NewEncoder(w).Encode([]string{})
		return
	}
	suggestions := []string{}
	artists, _, _, _ := getCachedData()

	for _, artist := range artists {
		// Artist/band name
		if strings.Contains(strings.ToLower(artist.Name), strings.ToLower(query)) {
			suggestions = append(suggestions, fmt.Sprintf("%s - artist/band", artist.Name))
		}

		// Members
		for _, member := range artist.Members {
			if strings.Contains(strings.ToLower(member), strings.ToLower(query)) {
				suggestions = append(suggestions, fmt.Sprintf("%s - member", member))
			}
		}

		// First album date
		if strings.Contains(strings.ToLower(artist.FirstAlbum), strings.ToLower(query)) {
			suggestions = append(suggestions, fmt.Sprintf("%s - first album date", artist.FirstAlbum))
		}

		// Creation date
		if strings.Contains(strconv.Itoa(artist.CreationDate), query) {
			suggestions = append(suggestions, fmt.Sprintf("%d - creation date", artist.CreationDate))
		}

		// Fetch actual location instead of URL
		loc, err := FetchArtistLocations(artist.Locations)
		if err == nil {
			if strings.Contains(strings.ToLower(loc), strings.ToLower(query)) {
				suggestions = append(suggestions, fmt.Sprintf("%s - location", loc))
			}
		}
	}

	json.NewEncoder(w).Encode(suggestions)
}

func ServeArtistDetails(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path == "/artist/" {
		ErrorHandler(w, "oops! page not found", http.StatusNotFound, true, true)
		return
	}

	idStr := r.URL.Path[len("/artist/"):]
	id, err := strconv.Atoi(idStr)
	if err != nil {
		ErrorHandler(w, "Invalid artist ID", http.StatusBadRequest, true, true)
		return
	}

	artist, location, date, relation, err := api.GetArtistByID(id)
	if err != nil {
		log.Printf("Error retrieving artist by ID %v: %s", id, err)
		ErrorHandler(w, "Ooops!\n We ran into an issue while fetching Artists,\n Please try again later.", http.StatusInternalServerError, false, false)
		return
	}

	data := ArtistDetailData{
		Artist:   *artist,
		Location: *location,
		Date:     *date,
		Relation: *relation,
	}

	tmpl, err := template.ParseFiles("templates/artist_details.html")
	if err != nil {
		log.Printf("Error parsing template: %v", err)
		ErrorHandler(w, "Unable to load artist details at this time. Please try again later.", http.StatusInternalServerError, false, false)
		return
	}
	err = tmpl.Execute(w, data)
	if err != nil {
		log.Printf("Error executing template: %v", err)
		ErrorHandler(w, "Error rendering artist details. Please try again later.", http.StatusInternalServerError, false, false)
		return
	}
}

// GetArtistsHandler handles the /artists route
func GetArtistsHandler(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query().Get("query")
	artists, err := api.GetArtists()
	if err != nil {
		log.Printf("Error fetching artists: %v", err)
		ErrorHandler(w, "Unable to retrieve artist information at this time. Please try again later.", http.StatusInternalServerError, false, false)
		return
	}

	filteredArtists := filterArtists(artists, query)

	if len(filteredArtists) == 0 {
		ErrorHandler(w, "No artists found matching the search term.", http.StatusNotFound, false, false)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(filteredArtists); err != nil {
		log.Printf("Error encoding artists data to JSON: %v", err)
		ErrorHandler(w, "An error occurred while processing the artist data. Please try again later.", http.StatusInternalServerError, false, false)
		return
	}
}

// GetLocationsHandler handles the /locations route
func GetLocationsHandler(w http.ResponseWriter, r *http.Request) {
	initCache()
	_, locations, _, _ := getCachedData()

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(locations); err != nil {
		log.Printf("Error encoding locations data to JSON: %v", err)
		ErrorHandler(w, "An error occurred while processing location data. Please try again later.", http.StatusInternalServerError, false, false)
		return
	}
}

// GetDatesHandler handles the /dates route
func GetDatesHandler(w http.ResponseWriter, r *http.Request) {
	initCache()
	_, _, dates, _ := getCachedData()

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(dates); err != nil {
		log.Printf("Error encoding dates data to JSON: %v", err)
		ErrorHandler(w, "An error occurred while processing date information. Please try again later.", http.StatusInternalServerError, false, false)
		return
	}
}

// GetRelationsHandler handles the /relations route
func GetRelationsHandler(w http.ResponseWriter, r *http.Request) {
	initCache()
	_, _, _, relations := getCachedData()

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(relations); err != nil {
		log.Printf("Error encoding relations data to JSON: %v", err)
		ErrorHandler(w, "An error occurred while processing relation data. Please try again later.", http.StatusInternalServerError, false, false)
		return
	}
}

func GetArtistByIDHandler(w http.ResponseWriter, r *http.Request) {
	// Get artist ID from the URL path
	idStr := r.URL.Path[len("/artists/"):]
	artistID, err := strconv.Atoi(idStr)
	if err != nil {
		log.Printf("Invalid artist ID: %v", err)
		ErrorHandler(w, "Invalid artist ID provided. Please check and try again.", http.StatusBadRequest, true, true)
		return
	}

	artist, location, date, relation, err := api.GetArtistByID(artistID)
	if err != nil {
		// Check if the artist was not found
		if err.Error() == "artist not found" {
			ErrorHandler(w, "Artist not found. Please check the ID and try again.", http.StatusNotFound, true, true)
		} else {
			log.Printf("Error fetching artist details with ID %d: %v", artistID, err)
			ErrorHandler(w, "Unable to retrieve artist details at this time. Please try again later.", http.StatusInternalServerError, false, false)
		}
		return
	}

	// Create a response combining artist, location, date, and relation data
	response := struct {
		Artist   *api.Artist   `json:"artist"`
		Location *api.Location `json:"location"`
		Date     *api.Date     `json:"date"`
		Relation *api.Relation `json:"relation"`
	}{
		Artist:   artist,
		Location: location,
		Date:     date,
		Relation: relation,
	}

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("Error encoding response for artist ID %d: %v", artistID, err)
		ErrorHandler(w, "An error occurred while processing the response. Please try again later.", http.StatusInternalServerError, false, false)
		return
	}
}

// Serve About Page
func AboutHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		ErrorHandler(w, "method not allowed", http.StatusMethodNotAllowed, true, true)
		return
	}
	tmpl, err := template.ParseFiles("templates/about.html")
	if err != nil {
		ErrorHandler(w, "file not found", http.StatusNotFound, true, true)
		log.Printf("Error parsing index.html: %v\n", err)
		return
	}
	err = tmpl.Execute(w, nil)
	if err != nil {
		ErrorHandler(w, "Something unexpected occured", http.StatusInternalServerError, false, false)
		log.Printf("Error executing template: %v\n", err)
		return
	}
}

// Fetch artist locations from the provided URL

func FetchArtistLocations(locationsURL string) (string, error) {
	body, err := api.FetchData(locationsURL)
	if err != nil {
		return "", fmt.Errorf("failed to fetch location data: %v", err)
	}

	var locationData api.Location
	if err := json.Unmarshal(body, &locationData); err != nil {
		return "", fmt.Errorf("failed to unmarshal location data: %v", err)
	}

	// Join the locations into a single string
	locationsString := strings.Join(locationData.Locations, ", ")

	return locationsString, nil
}

// func FetchArtistLocations(locationsURL string) ([]string, error) {
// 	body, err := api.FetchData(locationsURL)
// 	if err != nil {
// 		return nil, fmt.Errorf("failed to fetch location data: %v", err)
// 	}

// 	var locationData api.Location
// 	if err := json.Unmarshal(body, &locationData); err != nil {
// 		return nil, fmt.Errorf("failed to unmarshal location data: %v", err)
// 	}
// 	return locationData.Locations, nil
// }


api/api.go

package api

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

// Structs to unmarshal JSON data
type Artist struct {
	ID           int      `json:"id"`
	Name         string   `json:"name"`
	Image        string   `json:"image"`
	CreationDate int      `json:"creationDate"`
	FirstAlbum   string   `json:"firstAlbum"`
	Members      []string `json:"members"`
	Locations    string   `json:"locations"`
	ConcertDates string   `json:"concertDates"`
	Relations    string   `json:"relations"`
}

type Location struct {
	ID        int      `json:"id"`
	Locations []string `json:"locations"`
	Dates     string   `json:"dates"`
}

type Date struct {
	ID    int      `json:"id"`
	Dates []string `json:"dates"`
}

type Relation struct {
	ID             int                 `json:"id"`
	DatesLocations map[string][]string `json:"datesLocations"`
}

var (
	ArtistsURL   = "https://groupietrackers.herokuapp.com/api/artists"
	LocationsURL = "https://groupietrackers.herokuapp.com/api/locations"
	DatesURL     = "https://groupietrackers.herokuapp.com/api/dates"
	RelationURL  = "https://groupietrackers.herokuapp.com/api/relation"
)

// FetchData makes an HTTP GET request to the given URL and returns the response body
func FetchData(url string) ([]byte, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch data: %v", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response body: %v", err)
	}

	return body, nil
}

// GetArtists fetches the artist data from the API and returns a slice of Artist structs
func GetArtists() ([]Artist, error) {
	body, err := FetchData(ArtistsURL)
	if err != nil {
		return nil, err
	}

	var artists []Artist
	if err := json.Unmarshal(body, &artists); err != nil {
		return nil, fmt.Errorf("failed to unmarshal artists: %v", err)
	}

	return artists, nil
}

// GetLocations fetches the location data from the API and returns a slice of Location structs
func GetLocations() ([]Location, error) {
	body, err := FetchData(LocationsURL)
	if err != nil {
		return nil, err
	}

	var locations struct {
		Index []Location `json:"index"`
	}

	if err := json.Unmarshal(body, &locations); err != nil {
		return nil, fmt.Errorf("failed to unmarshal locations: %v", err)
	}
	return locations.Index, nil
}

// GetDates fetches the date data from the API and returns a slice of Date structs
func GetDates() ([]Date, error) {
	body, err := FetchData(DatesURL)
	if err != nil {
		return nil, err
	}

	var dates struct {
		Index []Date `json:"index"`
	}

	if err := json.Unmarshal(body, &dates); err != nil {
		return nil, fmt.Errorf("failed to unmarshal dates: %v", err)
	}

	return dates.Index, nil
}

// GetRelations fetches the relation data from the API and returns a slice of Relation structs
func GetRelations() ([]Relation, error) {
	body, err := FetchData(RelationURL)
	if err != nil {
		return nil, err
	}

	var relations struct {
		Index []Relation `json:"index"`
	}
	if err := json.Unmarshal(body, &relations); err != nil {
		return nil, fmt.Errorf("failed to unmarshal relations: %v", err)
	}

	return relations.Index, nil
}

// GetArtistByID fetches the artist data by ID and returns the Artist struct along with its relation
func GetArtistByID(artistID int) (*Artist, *Location, *Date, *Relation, error) {
	// Create channels to receive data
	artistChan := make(chan *Artist, 1)
	locationChan := make(chan *Location, 1)
	dateChan := make(chan *Date, 1)
	relationChan := make(chan *Relation, 1)
	errChan := make(chan error, 4)

	// Goroutines to fetch each piece of data concurrently
	go func() {
		artists, err := GetArtists()
		if err != nil {
			errChan <- err
			return
		}
		for _, a := range artists {
			if a.ID == artistID {
				artistChan <- &a
				return
			}
		}
		errChan <- fmt.Errorf("artist not found")
	}()

	go func() {
		locations, err := GetLocations()
		if err != nil {
			errChan <- err
			return
		}
		for _, l := range locations {
			if l.ID == artistID {
				locationChan <- &l
				// log.Printf("Artist ID %d, Location found: %v", artistID, l.Locations)
				return
			}
		}
		errChan <- fmt.Errorf("location not found for artist")
	}()

	go func() {
		dates, err := GetDates()
		if err != nil {
			errChan <- err
			return
		}
		for _, d := range dates {
			if d.ID == artistID {
				dateChan <- &d
				return
			}
		}
		errChan <- fmt.Errorf("date not found for artist")
	}()

	go func() {
		relations, err := GetRelations()
		if err != nil {
			errChan <- err
			return
		}
		for _, r := range relations {
			if r.ID == artistID {
				relationChan <- &r
				return
			}
		}
		errChan <- fmt.Errorf("relation not found for artist")
	}()

	// Variables to hold fetched data
	var artist *Artist
	var location *Location
	var date *Date
	var relation *Relation

	// Use a loop to gather data from channels
	for i := 0; i < 4; i++ {
		select {
		case a := <-artistChan:
			artist = a
		case l := <-locationChan:
			location = l
		case d := <-dateChan:
			date = d
		case r := <-relationChan:
			relation = r
		case err := <-errChan:
			return nil, nil, nil, nil, err
		}
	}

	return artist, location, date, relation, nil
}


static/search.js 

document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("search-input");
    const suggestionsList = document.getElementById("suggestions");
    const searchButton = document.getElementById("search-button");
    let cachedSuggestions = [];
  
    // Fetch and cache suggestions on page load
    fetch('/search-suggestions?q=')
      .then(response => response.json())
      .then(suggestions => {
        cachedSuggestions = suggestions;
      })
      .catch(err => {
        console.error("Error fetching initial suggestions:", err);
      });
  
    // Debounce function
    function debounce(func, delay) {
      let timeoutId;
      return function (...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(this, args), delay);
      };
    }
  
    // Filter suggestions based on input
    function filterSuggestions(query) {
      query = query.toLowerCase();
      return cachedSuggestions.filter(suggestion => 
        suggestion.toLowerCase().includes(query)
      );
    }
  
    // Display suggestions
    function displaySuggestions(suggestions) {
      suggestionsList.innerHTML = "";
      const seenSuggestions = new Set();
      
      suggestions.forEach(suggestion => {
        const nameTypeCombo = suggestion.toLowerCase();
        
        if (!seenSuggestions.has(nameTypeCombo)) {
          seenSuggestions.add(nameTypeCombo);
  
          const li = document.createElement("li");
          li.textContent = suggestion;
          li.addEventListener("click", () => {
            searchInput.value = suggestion.split(" - ")[0];
            performSearch(searchInput.value);
          });
          suggestionsList.appendChild(li);
        }
      });
    }
  
    // Throttled search function
    const throttledSearch = debounce((query) => {
      if (query === "") {
        suggestionsList.innerHTML = "";
        return;
      }
  
      const filteredSuggestions = filterSuggestions(query);
      displaySuggestions(filteredSuggestions);
    }, 100);
  
    function performSearch(query) {
      window.location.href = `/?query=${encodeURIComponent(query)}`;
    }
  
    searchInput.addEventListener("input", function() {
      const query = searchInput.value.trim();
      throttledSearch(query);
    });
  
    searchButton.addEventListener("click", function() {
      performSearch(searchInput.value.trim());
    });
  
    document.addEventListener("click", function(event) {
      if (!searchInput.contains(event.target) && !suggestionsList.contains(event.target)) {
        suggestionsList.innerHTML = "";
      }
    });
  
    // // Handle form submission
    // searchInput.closest("form").addEventListener("submit", function(e) {
    //   e.preventDefault();
    //   performSearch(searchInput.value.trim());
    // });
  });